{"version":3,"sources":["../../src/aws/LayersService.js"],"names":["AbstractService","require","LayersService","params","Content","S3Bucket","bucketName","S3Key","zipFileKeyName","LayerName","layerName","Description","CompatibleRuntimes","plugin","settings","compatibleRuntimes","CompatibleArchitectures","compatibleArchitectures","awsRequest","checkError","then","result","log","cacheObject","LayerVersionArn","keepVersion","response","LayerVersions","length","deletionCandidates","selectVersionsToDelete","deleteQueue","map","layerVersion","Version","VersionNumber","Promise","all","cleanUpLayers","versions","sort","a","b","parseInt","slice","module","exports"],"mappings":"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","sourcesContent":["const AbstractService = require('../AbstractService');\n\nclass LayersService extends AbstractService {\n  async publishVersion() {\n    const params = {\n      Content: {\n        S3Bucket: this.bucketName,\n        S3Key: this.zipFileKeyName\n      },\n      LayerName: this.layerName,\n      Description: 'created by serverless-layers plugin',\n      CompatibleRuntimes: this.plugin.settings.compatibleRuntimes,\n      CompatibleArchitectures: this.plugin.settings.compatibleArchitectures\n    };\n\n    return this.awsRequest('Lambda:publishLayerVersion', params, { checkError: true })\n      .then((result) => {\n        this.plugin.log('New layer version published...');\n        this.plugin.cacheObject.LayerVersionArn = result.LayerVersionArn;\n        return result;\n      });\n  }\n\n  async cleanUpLayers(keepVersion = 0) {\n    const params = {\n      LayerName: this.layerName\n    };\n\n    const response = await this.awsRequest('Lambda:listLayerVersions', params, { checkError: true });\n\n    if (response.LayerVersions.length <= keepVersion) {\n      this.plugin.log('Layers removal finished.\\n');\n      return;\n    }\n\n    const deletionCandidates = this.selectVersionsToDelete(response.LayerVersions, keepVersion);\n\n    const deleteQueue = deletionCandidates.map((layerVersion) => {\n      this.plugin.log(`Removing layer version: ${layerVersion.Version}`);\n      return this.awsRequest('Lambda:deleteLayerVersion', {\n        LayerName: this.layerName,\n        VersionNumber: layerVersion.Version\n      }, { checkError: true });\n    });\n\n    await Promise.all(deleteQueue);\n\n    await this.cleanUpLayers(keepVersion);\n  }\n\n  selectVersionsToDelete(versions, keepVersion) {\n    return versions\n      .sort((a, b) => parseInt(a.Version) === parseInt(b.Version) ? 0 : parseInt(a.Version) > parseInt(b.Version) ? -1 : 1)\n      .slice(keepVersion);\n  }\n}\n\nmodule.exports = LayersService;\n"],"file":"LayersService.js"}