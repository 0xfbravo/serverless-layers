{"version":3,"sources":["../../src/runtimes/python.js"],"names":["fs","require","path","PythonRuntime","parent","runtime","runtimeDir","plugin","libraryFolder","packageManager","dependenciesPath","compatibleRuntimes","copyBeforeInstall","packageExclude","commands","pip","settings","localpackageJson","join","process","cwd","localPackage","readFileSync","toString","e","log","exit","run","osVersion","match","runtimeVersion","version","isCompatible","startsWith","depsA","depsB","bucketService","downloadDependencesFile","remotePackage","isDifferent","isDiff","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;IAEME,a;AACJ,yBAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,UAA7B,EAAyC;AAAA;AACvC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKG,MAAL,GAAcH,MAAM,CAACG,MAArB;AAEA,sBAAe;AACbF,MAAAA,OAAO,EAAPA,OADa;AAEbC,MAAAA,UAAU,EAAVA,UAFa;AAGbE,MAAAA,aAAa,EAAE,eAHF;AAIbC,MAAAA,cAAc,EAAG,KAJJ;AAKbC,MAAAA,gBAAgB,EAAE,kBALL;AAMbC,MAAAA,kBAAkB,EAAE,CAACN,OAAD,CANP;AAObO,MAAAA,iBAAiB,EAAE,EAPN;AAQbC,MAAAA,cAAc,EAAE,CACd,cADc,EAEd,mBAFc,EAGd,iBAHc;AARH,KAAf;AAeA,SAAKC,QAAL,GAAgB;AACdC,MAAAA,GAAG,2BAAoB,gBAAaL,gBAAjC;AADW,KAAhB;AAGD;;;;WAED,gBAAO;AACL,UAAQA,gBAAR,GAA6B,KAAKH,MAAL,CAAYS,QAAzC,CAAQN,gBAAR;AAEA,UAAMO,gBAAgB,GAAGf,IAAI,CAACgB,IAAL,CACvBC,OAAO,CAACC,GAAR,EADuB,EAEvBV,gBAFuB,CAAzB;;AAKA,UAAI;AACF,aAAKW,YAAL,GAAoBrB,EAAE,CAACsB,YAAH,CAAgBL,gBAAhB,EAAkCM,QAAlC,EAApB;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACV,aAAKjB,MAAL,CAAYkB,GAAZ,+BAAuCR,gBAAvC;AACAE,QAAAA,OAAO,CAACO,IAAR,CAAa,CAAb;AACD;AACF;;;;+GAED,iBAA0BrB,OAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC0B,KAAKD,MAAL,CAAYuB,GAAZ,CAAgB,kBAAhB,CAD1B;;AAAA;AACQC,gBAAAA,SADR;AAAA,iCAE2BvB,OAAO,CAACwB,KAAR,CAAc,aAAd,CAF3B,wEAESC,cAFT;AAAA,iDAGS;AACLC,kBAAAA,OAAO,EAAEH,SADJ;AAELI,kBAAAA,YAAY,EAAEJ,SAAS,CAACK,UAAV,kBAA+BH,cAA/B;AAFT,iBAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WASA,gBAAOI,KAAP,EAAcC,KAAd,EAAqB;AACnB,UAAI,CAACD,KAAL,EAAY;AACV,eAAO,IAAP;AACD;;AACD,aAAOA,KAAK,KAAKC,KAAjB;AACD;;;;kHAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC8B,KAAK5B,MAAL,CAAY6B,aAAZ,CAA0BC,uBAA1B,EAD9B;;AAAA;AACQC,gBAAAA,aADR;AAGMC,gBAAAA,WAHN,GAGoB,IAHpB;;AAAA,qBAKMD,aALN;AAAA;AAAA;AAAA;;AAMI,qBAAK/B,MAAL,CAAYkB,GAAZ,qBAA6B,gBAAaf,gBAA1C;AANJ;AAAA,uBAOwB,KAAK8B,MAAL,CAAYF,aAAZ,EAA2B,KAAKjB,YAAhC,CAPxB;;AAAA;AAOIkB,gBAAAA,WAPJ;;AAAA;AAAA,kDAUSA,WAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;AAcFE,MAAM,CAACC,OAAP,GAAiBvC,aAAjB","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\nclass PythonRuntime {\n  constructor(parent, runtime, runtimeDir) {\n    this.parent = parent;\n    this.plugin = parent.plugin;\n\n    this.default = {\n      runtime,\n      runtimeDir,\n      libraryFolder: 'site-packages',\n      packageManager:  'pip',\n      dependenciesPath: 'requirements.txt',\n      compatibleRuntimes: [runtime],\n      copyBeforeInstall: [],\n      packageExclude: [\n        'package.json',\n        'package-lock.json',\n        'node_modules/**',\n      ]\n    };\n\n    this.commands = {\n      pip: `pip install -r ${this.default.dependenciesPath} -t .`,\n    };\n  }\n\n  init() {\n    const { dependenciesPath } = this.plugin.settings;\n\n    const localpackageJson = path.join(\n      process.cwd(),\n      dependenciesPath\n    );\n\n    try {\n      this.localPackage = fs.readFileSync(localpackageJson).toString();\n    } catch (e) {\n      this.plugin.log(`Error: Can not find ${localpackageJson}!`);\n      process.exit(1);\n    }\n  }\n\n  async isCompatibleVersion(runtime) {\n    const osVersion = await this.parent.run('python --version');\n    const [runtimeVersion] = runtime.match(/[0-9].[0-9]/);\n    return {\n      version: osVersion,\n      isCompatible: osVersion.startsWith(`Python ${runtimeVersion}`)\n    };\n  }\n\n  isDiff(depsA, depsB) {\n    if (!depsA) {\n      return true;\n    }\n    return depsA !== depsB;\n  }\n\n  async hasDependenciesChanges() {\n    const remotePackage = await this.plugin.bucketService.downloadDependencesFile();\n\n    let isDifferent = true;\n\n    if (remotePackage) {\n      this.plugin.log(`Comparing ${this.default.dependenciesPath} dependencies...`);\n      isDifferent = await this.isDiff(remotePackage, this.localPackage);\n    }\n\n    return isDifferent;\n  }\n}\n\nmodule.exports = PythonRuntime;\n"],"file":"python.js"}