{"version":3,"sources":["../../src/runtimes/ruby.js"],"names":["fs","require","path","RubyRuntime","parent","runtime","runtimeDir","plugin","packageManager","dependenciesPath","compatibleRuntimes","copyBeforeInstall","copyAfterInstall","from","to","packageExclude","commands","bundle","settings","localpackageJson","join","process","cwd","localPackage","readFileSync","toString","e","log","exit","run","osVersion","match","runtimeVersion","version","isCompatible","startsWith","depsA","depsB","bucketService","downloadDependencesFile","remotePackage","isDifferent","isDiff","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;IAGME,W;AACJ,uBAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,UAA7B,EAAyC;AAAA;AACvC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKG,MAAL,GAAcH,MAAM,CAACG,MAArB;AAEA,sBAAe;AACbF,MAAAA,OAAO,EAAPA,OADa;AAEbC,MAAAA,UAAU,EAAVA,UAFa;AAGbE,MAAAA,cAAc,EAAG,QAHJ;AAIbC,MAAAA,gBAAgB,EAAE,SAJL;AAKbC,MAAAA,kBAAkB,EAAE,CAACL,OAAD,CALP;AAMbM,MAAAA,iBAAiB,EAAE,CACjB,cADiB,CANN;AASbC,MAAAA,gBAAgB,EAAE,CAChB;AAAEC,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,EAAE,EAAE;AAApB,OADgB,CATL;AAYbC,MAAAA,cAAc,EAAE,CACd,iBADc,EAEd,cAFc,EAGd,mBAHc,EAId,WAJc,EAKd,SALc;AAZH,KAAf;AAqBA,SAAKC,QAAL,GAAgB;AACdC,MAAAA,MAAM,qCAA8B,gBAAaR,gBAA3C;AADQ,KAAhB;AAGD;;;;2BAEM;AAAA,UACGA,gBADH,GACwB,KAAKF,MAAL,CAAYW,QADpC,CACGT,gBADH;AAGL,UAAMU,gBAAgB,GAAGjB,IAAI,CAACkB,IAAL,CACvBC,OAAO,CAACC,GAAR,EADuB,EAEvBb,gBAFuB,CAAzB;;AAKA,UAAI;AACF,aAAKc,YAAL,GAAoBvB,EAAE,CAACwB,YAAH,CAAgBL,gBAAhB,EAAkCM,QAAlC,EAApB;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACV,aAAKnB,MAAL,CAAYoB,GAAZ,+BAAuCR,gBAAvC;AACAE,QAAAA,OAAO,CAACO,IAAR,CAAa,CAAb;AACD;AACF;;;;gIAEyBvB,O;;;;;;;;uBACA,KAAKD,MAAL,CAAYyB,GAAZ,CAAgB,gBAAhB,C;;;AAAlBC,gBAAAA,S;iCACmBzB,OAAO,CAAC0B,KAAR,CAAc,aAAd,C,wEAAlBC,c;iDACA;AACLC,kBAAAA,OAAO,EAAEH,SADJ;AAELI,kBAAAA,YAAY,EAAEJ,SAAS,CAACK,UAAV,gBAA6BH,cAA7B;AAFT,iB;;;;;;;;;;;;;;;;;;2BAMFI,K,EAAOC,K,EAAO;AACnB,UAAI,CAACD,KAAL,EAAY;AACV,eAAO,IAAP;AACD;;AACD,aAAOA,KAAK,KAAKC,KAAjB;AACD;;;;;;;;;;;uBAG6B,KAAK9B,MAAL,CAAY+B,aAAZ,CAA0BC,uBAA1B,E;;;AAAtBC,gBAAAA,a;AAEFC,gBAAAA,W,GAAc,I;;qBAEdD,a;;;;;AACF,qBAAKjC,MAAL,CAAYoB,GAAZ,qBAA6B,gBAAalB,gBAA1C;;uBACoB,KAAKiC,MAAL,CAAYF,aAAZ,EAA2B,KAAKjB,YAAhC,C;;;AAApBkB,gBAAAA,W;;;kDAGKA,W;;;;;;;;;;;;;;;;;;;;AAIXE,MAAM,CAACC,OAAP,GAAiBzC,WAAjB","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\n\nclass RubyRuntime {\n  constructor(parent, runtime, runtimeDir) {\n    this.parent = parent;\n    this.plugin = parent.plugin;\n\n    this.default = {\n      runtime,\n      runtimeDir,\n      packageManager:  'bundle',\n      dependenciesPath: 'Gemfile',\n      compatibleRuntimes: [runtime],\n      copyBeforeInstall: [\n        'Gemfile.lock'\n      ],\n      copyAfterInstall: [\n        { from: 'ruby', to: 'gems' }\n      ],\n      packageExclude: [\n        'node_modules/**',\n        'package.json',\n        'package-lock.json',\n        'vendor/**',\n        '.bundle'\n      ]\n    };\n\n    this.commands = {\n      bundle: `bundle install --gemfile=${this.default.dependenciesPath} --path=./`,\n    };\n  }\n\n  init() {\n    const { dependenciesPath } = this.plugin.settings;\n\n    const localpackageJson = path.join(\n      process.cwd(),\n      dependenciesPath\n    );\n\n    try {\n      this.localPackage = fs.readFileSync(localpackageJson).toString();\n    } catch (e) {\n      this.plugin.log(`Error: Can not find ${localpackageJson}!`);\n      process.exit(1);\n    }\n  }\n\n  async isCompatibleVersion(runtime) {\n    const osVersion = await this.parent.run('ruby --version');\n    const [runtimeVersion] = runtime.match(/[0-9].[0-9]/);\n    return {\n      version: osVersion,\n      isCompatible: osVersion.startsWith(`ruby ${runtimeVersion}`)\n    };\n  }\n\n  isDiff(depsA, depsB) {\n    if (!depsA) {\n      return true;\n    }\n    return depsA !== depsB;\n  }\n\n  async hasDependencesChanged() {\n    const remotePackage = await this.plugin.bucketService.downloadDependencesFile();\n\n    let isDifferent = true;\n\n    if (remotePackage) {\n      this.plugin.log(`Comparing ${this.default.dependenciesPath} dependencies...`);\n      isDifferent = await this.isDiff(remotePackage, this.localPackage);\n    }\n\n    return isDifferent;\n  }\n}\n\nmodule.exports = RubyRuntime;\n"],"file":"ruby.js"}