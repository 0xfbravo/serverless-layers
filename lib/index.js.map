{"version":3,"sources":["../src/index.js"],"names":["BbPromise","require","install","mkdirp","fs","copyFile","path","archiver","MAX_LAYER_MB_SIZE","ServerlessLayers","serverless","options","cacheObject","service","provider","getProvider","region","getRegion","log","bind","main","hooks","then","finalizeDeploy","inboundSettings","custom","defaultSettings","compileDir","packagePath","settings","Object","assign","localPackage","join","process","env","PWD","stage","params","StackName","getStackName","logicalId","naming","getDeploymentBucketOutputLogicalId","request","Stacks","Outputs","catch","e","deploymentBucket","Error","getBucketName","bucketName","packagesTags","getDependenciesList","Content","S3Bucket","S3Key","getBucketLayersPath","LayerName","Description","CompatibleRuntimes","result","LayerVersionArn","console","message","exit","cwd","Promise","resolve","layersDir","oldCwd","zipFileName","getPathZipFileName","output","createWriteStream","zip","create","on","MB","pointer","toFixed","err","reject","chdir","pipe","directory","finalize","Bucket","Key","Body","createReadStream","JSON","parse","toString","serviceStage","getDeploymentPrefix","getOutputs","outputs","getOutputLogicalId","find","x","OutputKey","OutputValue","getLambdaLayerOutputLogicalId","layerArn","functions","funcName","layers","push","resources","outputName","Value","Export","Name","layerName","downloadPackageJson","remotePackage","isDifferent","isDiff","dependencies","getLayerArn","currentLayerARN","relateLayerWithFunctions","installDependencies","uploadPackageJson","createPackageLayer","uploadPackageLayer","publishLayerVersion","version","depsA","depsB","depsKeyA","keys","depsKeyB","isSizeEqual","length","dependence","map","initialCwd","nodeJsDir","sync","opts","saveDev","cache","silent","msg","cli","module","exports"],"mappings":"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","sourcesContent":["const BbPromise = require('bluebird');\nconst install = require('npm-install-package')\nconst mkdirp = require('mkdirp')\nconst fs = require('fs-extra')\nconst copyFile = require('fs-copy-file');\nconst path = require('path')\nconst archiver = require('archiver')\n\nconst MAX_LAYER_MB_SIZE = 250\n\nclass ServerlessLayers {\n  constructor(serverless, options) {\n    this.cacheObject = {}\n    this.options = options\n    this.serverless = serverless\n\n    this.service = serverless.service\n    this.provider = serverless.getProvider('aws')\n    this.options.region = this.provider.getRegion()\n\n    // bindings\n    this.log = this.log.bind(this)\n    this.main = this.main.bind(this)\n\n    // hooks\n    this.hooks = {\n      'package:initialize': () => BbPromise.bind(this)\n        .then(() => this.main()),\n      'aws:info:displayLayers': () => BbPromise.bind(this)\n        .then(() => this.finalizeDeploy())\n    }\n\n    const inboundSettings = (serverless.service.custom || {})[\n      \"serverless-layers\"\n    ];\n    const defaultSettings = {\n      compileDir: \".serverless\",\n      packagePath: `package.json`\n    };\n\n    this.settings = Object.assign({}, defaultSettings, inboundSettings);\n    this.localPackage = require(path.join(\n      process.env.PWD,\n      this.settings.packagePath\n    ));\n  }\n\n  getStackName() {\n    return `${this.serverless.service.service}-${this.options.stage}`\n  }\n\n  getOutputs() {\n    const params = { StackName: this.getStackName()}\n    const logicalId = this.provider.naming.getDeploymentBucketOutputLogicalId()\n    return this.provider.request('CloudFormation', 'describeStacks', params)\n      .then(({ Stacks }) => Stacks && Stacks[0].Outputs)\n      .catch(e => {\n        return []\n      })\n  }\n\n  getBucketName() {\n    if (!this.service.provider.deploymentBucket) {\n      throw new Error(\n        'Please, you should specify \"deploymentBucket\" for this plugin!\\n'\n      )\n    }\n    return this.service.provider.deploymentBucket\n  }\n\n  async publishLayerVersion() {\n    const bucketName = await this.getBucketName()\n    const packagesTags = this.getDependenciesList().join('\\n')\n    const params = {\n      Content: {\n        S3Bucket: bucketName,\n        S3Key: path.join(this.getBucketLayersPath(), this.getStackName() + '.zip')\n      },\n      LayerName: this.getStackName(),\n      Description: 'created by serverless-layers: ' + packagesTags,\n      CompatibleRuntimes: [ 'nodejs' ]\n    }\n    return this.provider.request('Lambda', 'publishLayerVersion', params)\n      .then((result) => {\n        this.log(\"New layer version published...\")\n        this.cacheObject.LayerVersionArn = result.LayerVersionArn\n        return result\n      })\n      .catch(e => {\n        console.log(e.message)\n        process.exit(1)\n      })\n  }\n\n  getPathZipFileName() {\n    return path.join(process.cwd(), this.settings.compileDir, this.getStackName() + '.zip')\n  }\n\n  createPackageLayer() {\n    return new Promise((resolve) => {\n      const layersDir = path.join(process.cwd(), this.settings.compileDir)\n      const oldCwd = process.cwd()\n      const zipFileName = this.getPathZipFileName()\n      const output = fs.createWriteStream(zipFileName)\n      const zip = archiver.create('zip')\n\n      output.on('close', () => {\n        const MB = (zip.pointer()/1024/1024).toFixed(1)\n\n        if (MB > MAX_LAYER_MB_SIZE) {\n          this.log(\"Package error!\")\n          throw new Error(\n            \"Layers can't exceed the unzipped deployment package size limit of 250 MB! \\n\" +\n            \"Read more: https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\\n\\n\"\n          )\n        }\n\n        this.log(`Created layer package ${zipFileName} (${MB} MB)`);\n        resolve()\n      })\n\n      zip.on('error', (err) => {\n        reject(err)\n        process.chdir(oldCwd)\n      });\n\n      process.chdir(layersDir)\n\n      zip.pipe(output);\n\n      zip.directory('layers', false)\n\n      zip.finalize()\n        .then(() => {\n          process.chdir(oldCwd)\n        })\n    })\n  }\n\n  async uploadPackageLayer() {\n    this.log(\"Uploading layer package...\")\n\n    const bucketName = await this.getBucketName()\n    const params = {\n      Bucket: bucketName,\n      Key: path.join(this.getBucketLayersPath(), this.getStackName() + '.zip'),\n      Body: fs.createReadStream(this.getPathZipFileName())\n    }\n\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.log(\"OK...\")\n        return result\n      })\n      .catch(e => {\n        console.log(e.message)\n        process.exit(1)\n      })\n  }\n\n  async uploadPackageJson() {\n    this.log(\"Uploading remote package.json...\")\n\n    const bucketName = await this.getBucketName()\n    const params = {\n      Bucket: bucketName,\n      Key: path.join(this.getBucketLayersPath(), 'package.json'),\n      Body: fs.createReadStream(this.settings.packagePath)\n    }\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.log(\"OK...\")\n        return result\n      })\n      .catch(e => {\n        console.log(e.message)\n        process.exit(1)\n      })\n  }\n\n  async downloadPackageJson() {\n    this.log(\"Downloading package.json from bucket...\")\n    const bucketName = await this.getBucketName()\n    const params = {\n      Bucket: bucketName,\n      Key: path.join(this.getBucketLayersPath(), 'package.json')\n    }\n    return this.provider.request('S3', 'getObject', params)\n    .then((result) => JSON.parse(result.Body.toString()))\n    .catch(e => {\n      this.log(\"package.json does not exists at bucket...\")\n      return null\n    })\n  }\n\n  getBucketLayersPath() {\n    const serviceStage = `${this.serverless.service.service}/${this.options.stage}`;\n    return path.join(\n      this.provider.getDeploymentPrefix(),\n      serviceStage,\n      'layers'\n    )\n  }\n\n  async getLayerArn() {\n    if (this.cacheObject.LayerVersionArn) {\n      return this.cacheObject.LayerVersionArn\n    }\n    const outputs = await this.getOutputs()\n    if (!outputs) return\n    const logicalId = this.getOutputLogicalId()\n    return (outputs.find(x => x.OutputKey === logicalId)||{}).OutputValue\n  }\n\n  getOutputLogicalId() {\n    return this.provider.naming.getLambdaLayerOutputLogicalId(this.getStackName())\n  }\n\n  relateLayerWithFunctions(layerArn) {\n    this.log('Associating layers...')\n\n    const functions = this.service.functions\n    for (const funcName in this.service.functions) {\n      functions[funcName].layers = functions[funcName].layers || []\n      functions[funcName].layers.push(layerArn)\n      this.log('function.' + funcName + ' - ' + layerArn)\n    }\n\n    this.service.resources = this.service.resources || {}\n    this.service.resources.Outputs = this.service.resources.Outputs || {}\n\n    const outputName = this.getOutputLogicalId()\n    Object.assign(this.service.resources.Outputs, {\n      [outputName]: {\n        Value: layerArn,\n        Export: {\n          Name: outputName\n        }\n      }\n    })\n  }\n\n  async main() {\n    this.settings.layerName = this.settings.layerName || this.serverless.service.service\n\n    const remotePackage = await this.downloadPackageJson()\n\n    let isDifferent = true\n    if (remotePackage) {\n      this.log(`Comparing package.json dependencies...`)\n      isDifferent = await this.isDiff(remotePackage.dependencies, this.localPackage.dependencies)\n    }\n\n    const currentLayerARN = await this.getLayerArn()\n\n    if (!isDifferent && currentLayerARN) {\n      this.log(`Not has changed! Using same layer arn: ${currentLayerARN}`)\n      this.relateLayerWithFunctions(currentLayerARN)\n      return\n    }\n\n    await this.installDependencies()\n    await this.uploadPackageJson()\n    await this.createPackageLayer()\n    await this.uploadPackageLayer()\n    const version = await this.publishLayerVersion()\n\n    return this.relateLayerWithFunctions(version.LayerVersionArn)\n  }\n\n  isDiff(depsA, depsB) {\n    const depsKeyA = Object.keys(depsA)\n    const depsKeyB = Object.keys(depsB)\n    const isSizeEqual = depsKeyA.length === depsKeyB.length\n\n    if (!isSizeEqual) return true\n\n    for(let dependence in depsA) {\n      if (depsA[dependence] !== depsB[dependence]) {\n        return true\n      }\n    }\n    return false\n  }\n\n  getDependenciesList() {\n    return Object.keys(this.localPackage.dependencies).map(x => (\n      `${x}@${this.localPackage.dependencies[x]}`\n    ))\n  }\n\n  async installDependencies() {\n    this.log(`Dependencies has changed! Re-installing...`)\n\n    const initialCwd = process.cwd()\n    const nodeJsDir = path.join(process.cwd(), this.settings.compileDir, 'layers', 'nodejs')\n\n    await mkdirp.sync(nodeJsDir)\n\n    return new Promise((resolve) => {\n      copyFile(this.settings.packagePath, path.join(nodeJsDir, 'package.json'), (err) => {\n        if (err) throw err;\n\n        // install deps\n        process.chdir(nodeJsDir)\n\n        const opts = { saveDev: false, cache: true, silent: false }\n\n        install(this.getDependenciesList(), opts, function (err) {\n          process.chdir(initialCwd);\n          if (err) throw err\n          resolve()\n        })\n      });\n    })\n  }\n\n  async finalizeDeploy() {\n    const currentLayerARN = await this.getLayerArn()\n    const functions = this.service.functions\n    for (const funcName in this.service.functions) {\n      this.log(`function.${funcName} = layers.${currentLayerARN}`)\n    }\n  }\n\n  log(msg) {\n    this.serverless.cli.log(`[LayersPlugin]: ${msg}`)\n  }\n}\n\nmodule.exports = ServerlessLayers;\n"],"file":"index.js"}