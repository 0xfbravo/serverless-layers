{"version":3,"sources":["../src/index.js"],"names":["BbPromise","require","install","mkdirp","fs","copyFile","path","archiver","MAX_LAYER_MB_SIZE","ServerlessLayers","serverless","options","cacheObject","service","provider","getProvider","region","getRegion","log","bind","main","hooks","then","finalizeDeploy","inboundSettings","custom","defaultSettings","compileDir","packagePath","layersDeploymentBucket","deploymentBucket","settings","Object","assign","localpackageJson","join","process","env","PWD","localPackage","e","exit","stage","params","StackName","getStackName","request","Stacks","Outputs","catch","Error","getBucketName","bucketName","Content","S3Bucket","S3Key","getBucketLayersPath","LayerName","Description","CompatibleRuntimes","result","LayerVersionArn","console","message","cwd","Promise","resolve","reject","layersDir","oldCwd","zipFileName","getPathZipFileName","output","createWriteStream","zip","create","on","MB","pointer","toFixed","err","chdir","pipe","directory","finalize","Bucket","Key","Body","createReadStream","JSON","parse","toString","serviceStage","getDeploymentPrefix","getOutputs","outputs","logicalId","getOutputLogicalId","find","x","OutputKey","OutputValue","naming","getLambdaLayerOutputLogicalId","layerArn","functions","keys","forEach","funcName","layers","push","resources","outputName","Value","Export","Name","layerName","downloadPackageJson","remotePackage","isDifferent","isDiff","dependencies","getLayerArn","currentLayerARN","relateLayerWithFunctions","installDependencies","uploadPackageJson","createPackageLayer","uploadPackageLayer","publishLayerVersion","version","depsA","depsB","depsKeyA","depsKeyB","isSizeEqual","length","hasDifference","dependence","map","initialCwd","nodeJsDir","sync","copyErr","opts","saveDev","cache","silent","getDependenciesList","installErr","msg","cli","module","exports"],"mappings":"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","sourcesContent":["const BbPromise = require('bluebird');\nconst install = require('npm-install-package');\nconst mkdirp = require('mkdirp');\nconst fs = require('fs');\nconst copyFile = require('fs-copy-file'); // v6.10.3 support\nconst path = require('path');\nconst archiver = require('archiver');\n\nconst MAX_LAYER_MB_SIZE = 250;\n\nclass ServerlessLayers {\n  constructor(serverless, options) {\n    this.cacheObject = {};\n    this.options = options;\n    this.serverless = serverless;\n\n    this.service = serverless.service;\n    this.provider = serverless.getProvider('aws');\n    this.options.region = this.provider.getRegion();\n\n    // bindings\n    this.log = this.log.bind(this);\n    this.main = this.main.bind(this);\n\n    // hooks\n    this.hooks = {\n      'package:initialize': () => BbPromise.bind(this)\n        .then(() => this.main()),\n      'aws:info:displayLayers': () => BbPromise.bind(this)\n        .then(() => this.finalizeDeploy())\n    };\n\n    const inboundSettings = (serverless.service.custom || {})[\n      'serverless-layers'\n    ];\n    const defaultSettings = {\n      compileDir: '.serverless',\n      packagePath: 'package.json',\n      layersDeploymentBucket: this.service.provider.deploymentBucket\n    };\n\n    this.settings = Object.assign({}, defaultSettings, inboundSettings);\n\n    const localpackageJson = path.join(\n      process.env.PWD,\n      this.settings.packagePath\n    );\n\n    try {\n      this.localPackage = require(localpackageJson);\n    } catch (e) {\n      this.log(`Error: Can not find ${localpackageJson}!`);\n      process.exit(1);\n    }\n  }\n\n  getStackName() {\n    return `${this.serverless.service.service}-${this.options.stage}`;\n  }\n\n  getOutputs() {\n    const params = { StackName: this.getStackName() };\n    return this.provider.request('CloudFormation', 'describeStacks', params)\n      .then(({ Stacks }) => Stacks && Stacks[0].Outputs)\n      .catch(() => []);\n  }\n\n  getBucketName() {\n    if (!this.settings.layersDeploymentBucket) {\n      throw new Error(\n        'Please, you should specify \"deploymentBucket\" for this plugin!\\n'\n      );\n    }\n    return this.settings.layersDeploymentBucket;\n  }\n\n  async publishLayerVersion() {\n    const bucketName = await this.getBucketName();\n    const params = {\n      Content: {\n        S3Bucket: bucketName,\n        S3Key: `${path.join(this.getBucketLayersPath(), this.getStackName())}.zip`\n      },\n      LayerName: this.getStackName(),\n      Description: 'created by serverless-layers',\n      CompatibleRuntimes: ['nodejs']\n    };\n    return this.provider.request('Lambda', 'publishLayerVersion', params)\n      .then((result) => {\n        this.log('New layer version published...');\n        this.cacheObject.LayerVersionArn = result.LayerVersionArn;\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  getPathZipFileName() {\n    return `${path.join(process.cwd(), this.settings.compileDir, this.getStackName())}.zip`;\n  }\n\n  createPackageLayer() {\n    return new Promise((resolve, reject) => {\n      const layersDir = path.join(process.cwd(), this.settings.compileDir);\n      const oldCwd = process.cwd();\n      const zipFileName = this.getPathZipFileName();\n      const output = fs.createWriteStream(zipFileName);\n      const zip = archiver.create('zip');\n\n      output.on('close', () => {\n        const MB = (zip.pointer() / 1024 / 1024).toFixed(1);\n\n        if (MB > MAX_LAYER_MB_SIZE) {\n          this.log('Package error!');\n          throw new Error(\n            'Layers can\\'t exceed the unzipped deployment package size limit of 250 MB! \\n'\n          + 'Read more: https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\\n\\n'\n          );\n        }\n\n        this.log(`Created layer package ${zipFileName} (${MB} MB)`);\n        resolve();\n      });\n\n      zip.on('error', (err) => {\n        reject(err);\n        process.chdir(oldCwd);\n      });\n\n      process.chdir(layersDir);\n\n      zip.pipe(output);\n\n      zip.directory('layers', false);\n\n      zip.finalize()\n        .then(() => {\n          process.chdir(oldCwd);\n        });\n    });\n  }\n\n  async uploadPackageLayer() {\n    this.log('Uploading layer package...');\n\n    const bucketName = await this.getBucketName();\n    const params = {\n      Bucket: bucketName,\n      Key: `${path.join(this.getBucketLayersPath(), this.getStackName())}.zip`,\n      Body: fs.createReadStream(this.getPathZipFileName())\n    };\n\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.log('OK...');\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  async uploadPackageJson() {\n    this.log('Uploading remote package.json...');\n\n    const bucketName = await this.getBucketName();\n    const params = {\n      Bucket: bucketName,\n      Key: path.join(this.getBucketLayersPath(), 'package.json'),\n      Body: fs.createReadStream(this.settings.packagePath)\n    };\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.log('OK...');\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  async downloadPackageJson() {\n    this.log('Downloading package.json from bucket...');\n    const bucketName = await this.getBucketName();\n    const params = {\n      Bucket: bucketName,\n      Key: path.join(this.getBucketLayersPath(), 'package.json')\n    };\n    return this.provider.request('S3', 'getObject', params)\n      .then((result) => JSON.parse(result.Body.toString()))\n      .catch(() => {\n        this.log('package.json does not exists at bucket...');\n        return null;\n      });\n  }\n\n  getBucketLayersPath() {\n    const serviceStage = `${this.serverless.service.service}/${this.options.stage}`;\n    return path.join(\n      this.provider.getDeploymentPrefix(),\n      serviceStage,\n      'layers'\n    );\n  }\n\n  async getLayerArn() {\n    if (this.cacheObject.LayerVersionArn) {\n      return this.cacheObject.LayerVersionArn;\n    }\n    const outputs = await this.getOutputs();\n    if (!outputs) return null;\n    const logicalId = this.getOutputLogicalId();\n    return (outputs.find(x => x.OutputKey === logicalId) || {}).OutputValue;\n  }\n\n  getOutputLogicalId() {\n    return this.provider.naming.getLambdaLayerOutputLogicalId(this.getStackName());\n  }\n\n  relateLayerWithFunctions(layerArn) {\n    this.log('Associating layers...');\n\n    const { functions } = this.service;\n\n    Object.keys(functions).forEach(funcName => {\n      functions[funcName].layers = functions[funcName].layers || [];\n      functions[funcName].layers.push(layerArn);\n      this.log(`function.${funcName} - ${layerArn}`);\n    });\n\n    this.service.resources = this.service.resources || {};\n    this.service.resources.Outputs = this.service.resources.Outputs || {};\n\n    const outputName = this.getOutputLogicalId();\n    Object.assign(this.service.resources.Outputs, {\n      [outputName]: {\n        Value: layerArn,\n        Export: {\n          Name: outputName\n        }\n      }\n    });\n  }\n\n  async main() {\n    this.settings.layerName = this.settings.layerName || this.serverless.service.service;\n\n    const remotePackage = await this.downloadPackageJson();\n\n    let isDifferent = true;\n    if (remotePackage) {\n      this.log('Comparing package.json dependencies...');\n      isDifferent = await this.isDiff(remotePackage.dependencies, this.localPackage.dependencies);\n    }\n\n    const currentLayerARN = await this.getLayerArn();\n\n    if (!isDifferent && currentLayerARN) {\n      this.log(`Not has changed! Using same layer arn: ${currentLayerARN}`);\n      this.relateLayerWithFunctions(currentLayerARN);\n      return;\n    }\n\n    await this.installDependencies();\n    await this.uploadPackageJson();\n    await this.createPackageLayer();\n    await this.uploadPackageLayer();\n    const version = await this.publishLayerVersion();\n\n    this.relateLayerWithFunctions(version.LayerVersionArn);\n  }\n\n  isDiff(depsA, depsB) {\n    const depsKeyA = Object.keys(depsA);\n    const depsKeyB = Object.keys(depsB);\n    const isSizeEqual = depsKeyA.length === depsKeyB.length;\n\n    if (!isSizeEqual) return true;\n\n    let hasDifference = false;\n    Object.keys(depsA).forEach(dependence => {\n      if (depsA[dependence] !== depsB[dependence]) {\n        hasDifference = true;\n      }\n    });\n\n    return hasDifference;\n  }\n\n  getDependenciesList() {\n    return Object.keys(this.localPackage.dependencies).map(x => (\n      `${x}@${this.localPackage.dependencies[x]}`\n    ));\n  }\n\n  async installDependencies() {\n    this.log('Dependencies has changed! Re-installing...');\n\n    const initialCwd = process.cwd();\n    const nodeJsDir = path.join(process.cwd(), this.settings.compileDir, 'layers', 'nodejs');\n\n    await mkdirp.sync(nodeJsDir);\n\n    return new Promise((resolve) => {\n      copyFile(this.settings.packagePath, path.join(nodeJsDir, 'package.json'), (copyErr) => {\n        if (copyErr) throw copyErr;\n\n        // install deps\n        process.chdir(nodeJsDir);\n\n        const opts = { saveDev: false, cache: true, silent: false };\n\n        install(this.getDependenciesList(), opts, (installErr) => {\n          process.chdir(initialCwd);\n          if (installErr) throw installErr;\n          resolve();\n        });\n      });\n    });\n  }\n\n  async finalizeDeploy() {\n    const currentLayerARN = await this.getLayerArn();\n    Object.keys(this.service.functions).forEach(funcName => {\n      this.log(`function.${funcName} = layers.${currentLayerARN}`);\n    });\n  }\n\n  log(msg) {\n    this.serverless.cli.log(`[LayersPlugin]: ${msg}`);\n  }\n}\n\nmodule.exports = ServerlessLayers;\n"],"file":"index.js"}