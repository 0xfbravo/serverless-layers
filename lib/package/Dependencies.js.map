{"version":3,"sources":["../../src/package/Dependencies.js"],"names":["fs","require","chalk","fsExtra","glob","path","mkdirp","execSync","copyFile","AbstractService","resolveFile","from","Promise","resolve","reject","err","files","Dependencies","layersPackageDir","getLayerPackageDir","sync","settings","plugin","rooPath","join","dependenciesPath","cmd","output","cwd","env","process","maxBuffer","toString","filePath","fileName","init","existsSync","warn","destFile","basename","copyErr","copyBeforeInstall","copyAfterInstall","log","inverse","yellow","renameFilename","runtimeDir","copyProjectFile","getDepsPath","index","filename","customInstallationCommand","console","run","white","commands","runtimes","getCommands","packageManager","pathTo","to","pathFrom","copy","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst chalk = require('chalk');\nconst fsExtra = require('fs-extra');\nconst glob = require('glob');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst { execSync } = require('child_process');\nconst copyFile = require('fs-copy-file'); // node v6.10.3 support\n\nconst AbstractService = require('../AbstractService');\n\nfunction resolveFile(from) {\n  return new Promise((resolve, reject) => {\n    glob(from, {}, (err, files) => {\n      if (err) return reject();\n      return resolve(files);\n    });\n  });\n}\n\nclass Dependencies extends AbstractService {\n  init() {\n    this.layersPackageDir = this.getLayerPackageDir();\n    return mkdirp.sync(this.layersPackageDir);\n  }\n\n  getDepsPath() {\n    const { settings } = this.plugin;\n    const rooPath = path.join(settings.path, settings.dependenciesPath);\n\n    return path.resolve(rooPath);\n  }\n\n  async run(cmd) {\n    const output = execSync(cmd, {\n      cwd: this.layersPackageDir,\n      env: process.env,\n      maxBuffer: 1024 * 1024 * 500\n    }).toString();\n    return output;\n  }\n\n  copyProjectFile(filePath, fileName = null) {\n    this.init();\n\n    if (!fs.existsSync(filePath)) {\n      this.plugin.warn(`[warning] \"${filePath}\" file does not exists!`);\n      return true;\n    }\n\n    return new Promise((resolve) => {\n      const destFile = path.join(this.layersPackageDir, fileName || path.basename(filePath));\n      copyFile(filePath, destFile, (copyErr) => {\n        if (copyErr) throw copyErr;\n        return resolve();\n      });\n    });\n  }\n\n  async install() {\n    const { copyBeforeInstall, copyAfterInstall } = this.plugin.settings;\n\n    this.init();\n    this.plugin.log(`${chalk.inverse.yellow(' Changes identified ')}! Re-installing...`);\n\n    /**\n     * This is necessary because npm is\n     * not possible to specify a custom\n     * name for package.json.\n     */\n    let renameFilename = null;\n    if (this.plugin.settings.runtimeDir === 'nodejs') {\n      renameFilename = 'package.json';\n    }\n\n    await this.copyProjectFile(this.getDepsPath(), renameFilename);\n\n    for (const index in copyBeforeInstall) {\n      const filename = copyBeforeInstall[index];\n      await this.copyProjectFile(filename);\n    }\n\n    // custom commands\n    if (this.plugin.settings.customInstallationCommand) {\n      console.log(chalk.white(await this.run(this.plugin.settings.customInstallationCommand)));\n    } else {\n      const commands = this.plugin.runtimes.getCommands();\n      console.log(chalk.white(await this.run(commands[this.plugin.settings.packageManager])));\n    }\n\n    for (const index in copyAfterInstall) {\n      const pathTo = copyAfterInstall[index].to;\n      const pathFrom = copyAfterInstall[index].from;\n\n      const [from] = await resolveFile(path.join(this.layersPackageDir, pathFrom));\n      const to = path.join(this.layersPackageDir, pathTo);\n\n      try {\n        await fsExtra.copy(from, to);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n}\n\nmodule.exports = Dependencies;\n"],"file":"Dependencies.js"}