{"version":3,"sources":["../../src/package/Dependencies.js"],"names":["fs","require","path","mkdirp","execSync","copyFile","AbstractService","Dependencies","runtimeDir","plugin","settings","layersPackageDir","join","process","cwd","compileDir","cmd","console","log","env","toString","filename","init","existsSync","Promise","resolve","copyErr","copyBeforeInstall","sync","copyProjectFile","dependenciesPath","index","customInstallationCommand","run","commands","runtimes","getCommands","packageManager","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;eACqBA,OAAO,CAAC,eAAD,C;IAApBG,Q,YAAAA,Q;;AACR,IAAMC,QAAQ,GAAGJ,OAAO,CAAC,cAAD,CAAxB,C,CAA0C;;;AAE1C,IAAMK,eAAe,GAAGL,OAAO,CAAC,oBAAD,CAA/B;;IAEMM,Y;;;;;;;;;;;;2BACG;AAAA,UACGC,UADH,GACkB,KAAKC,MAAL,CAAYC,QAD9B,CACGF,UADH;AAEL,WAAKG,gBAAL,GAAwBT,IAAI,CAACU,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,KAAKL,MAAL,CAAYC,QAAZ,CAAqBK,UAA9C,EAA0D,QAA1D,EAAoEP,UAApE,CAAxB;AACD;;;wBAEGQ,G,EAAK;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYd,QAAQ,CAACY,GAAD,EAAM;AACxBF,QAAAA,GAAG,EAAE,KAAKH,gBADc;AAExBQ,QAAAA,GAAG,EAAEN,OAAO,CAACM;AAFW,OAAN,CAAR,CAGTC,QAHS,EAAZ;AAID;;;oCAEeC,Q,EAAU;AAAA;;AACxB,WAAKC,IAAL;;AAEA,UAAI,CAACtB,EAAE,CAACuB,UAAH,CAAcF,QAAd,CAAL,EAA8B;AAC5B,aAAKZ,MAAL,CAAYS,GAAZ,uBAA8BG,QAA9B;AACA,eAAO,IAAP;AACD;;AAED,aAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BpB,QAAAA,QAAQ,CAACgB,QAAD,EAAWnB,IAAI,CAACU,IAAL,CAAU,KAAI,CAACD,gBAAf,EAAiCU,QAAjC,CAAX,EAAuD,UAACK,OAAD,EAAa;AAC1E,cAAIA,OAAJ,EAAa,MAAMA,OAAN;AACb,iBAAOD,OAAO,EAAd;AACD,SAHO,CAAR;AAID,OALM,CAAP;AAMD;;;;;;;;;;;;AAGSE,gBAAAA,iB,GAAsB,KAAKlB,MAAL,CAAYC,Q,CAAlCiB,iB;AAER,qBAAKL,IAAL;AACA,qBAAKb,MAAL,CAAYS,GAAZ,CAAgB,4CAAhB;;uBAEMf,MAAM,CAACyB,IAAP,CAAY,KAAKjB,gBAAjB,C;;;;uBACA,KAAKkB,eAAL,CAAqB,KAAKpB,MAAL,CAAYC,QAAZ,CAAqBoB,gBAA1C,C;;;2DAEcH,iB;;;;;;;;AAATI,gBAAAA,K;AACHV,gBAAAA,Q,GAAWM,iBAAiB,CAACI,KAAD,C;;oBAC7B/B,EAAE,CAACuB,UAAH,CAAcF,QAAd,C;;;;;;uBACG,KAAKQ,eAAL,CAAqBR,QAArB,C;;;;;;;qBAKN,KAAKZ,MAAL,CAAYC,QAAZ,CAAqBsB,yB;;;;;iDAChB,KAAKC,GAAL,CAAS,KAAKxB,MAAL,CAAYC,QAAZ,CAAqBsB,yBAA9B,C;;;AAGHE,gBAAAA,Q,GAAW,KAAKzB,MAAL,CAAY0B,QAAZ,CAAqBC,WAArB,E,EAEjB;;iDACO,KAAKH,GAAL,CAASC,QAAQ,CAAC,KAAKzB,MAAL,CAAYC,QAAZ,CAAqB2B,cAAtB,CAAjB,C;;;;;;;;;;;;;;;;;;EArDgB/B,e;;AAyD3BgC,MAAM,CAACC,OAAP,GAAiBhC,YAAjB","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst { execSync } = require('child_process');\nconst copyFile = require('fs-copy-file'); // node v6.10.3 support\n\nconst AbstractService = require('../AbstractService');\n\nclass Dependencies extends AbstractService {\n  init() {\n    const { runtimeDir } = this.plugin.settings;\n    this.layersPackageDir = path.join(process.cwd(), this.plugin.settings.compileDir, 'layers', runtimeDir);\n  }\n\n  run(cmd) {\n    console.log(execSync(cmd, {\n      cwd: this.layersPackageDir,\n      env: process.env\n    }).toString());\n  }\n\n  copyProjectFile(filename) {\n    this.init();\n\n    if (!fs.existsSync(filename)) {\n      this.plugin.log(`[warning] \"${filename}\" file does not exists!`);\n      return true;\n    }\n\n    return new Promise((resolve) => {\n      copyFile(filename, path.join(this.layersPackageDir, filename), (copyErr) => {\n        if (copyErr) throw copyErr;\n        return resolve();\n      });\n    });\n  }\n\n  async install() {\n    const { copyBeforeInstall } = this.plugin.settings;\n\n    this.init();\n    this.plugin.log('Dependencies has changed! Re-installing...');\n\n    await mkdirp.sync(this.layersPackageDir);\n    await this.copyProjectFile(this.plugin.settings.dependenciesPath);\n\n    for (const index in copyBeforeInstall) {\n      const filename = copyBeforeInstall[index];\n      if (!fs.existsSync(filename)) {\n        await this.copyProjectFile(filename);\n      }\n    }\n\n    // custom commands\n    if (this.plugin.settings.customInstallationCommand) {\n      return this.run(this.plugin.settings.customInstallationCommand);\n    }\n\n    const commands = this.plugin.runtimes.getCommands();\n\n    // packages installation\n    return this.run(commands[this.plugin.settings.packageManager]);\n  }\n}\n\nmodule.exports = Dependencies;\n"],"file":"Dependencies.js"}