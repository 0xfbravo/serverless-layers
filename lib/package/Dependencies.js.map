{"version":3,"sources":["../../src/package/Dependencies.js"],"names":["fs","require","chalk","fsExtra","glob","path","mkdirp","execSync","copyFile","AbstractService","resolveFile","from","Promise","resolve","reject","err","files","Dependencies","layersPackageDir","getLayerPackageDir","sync","settings","plugin","rooPath","join","dependenciesPath","cmd","output","cwd","env","process","toString","filePath","fileName","init","existsSync","warn","destFile","basename","copyErr","copyBeforeInstall","copyAfterInstall","log","inverse","yellow","renameFilename","runtimeDir","copyProjectFile","getDepsPath","index","filename","customInstallationCommand","console","run","white","commands","runtimes","getCommands","packageManager","pathTo","to","pathFrom","copy","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst chalk = require('chalk');\nconst fsExtra = require('fs-extra');\nconst glob = require('glob');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst { execSync } = require('child_process');\nconst copyFile = require('fs-copy-file'); // node v6.10.3 support\n\nconst AbstractService = require('../AbstractService');\n\nfunction resolveFile(from) {\n  return new Promise((resolve, reject) => {\n    glob(from, {}, (err, files) => {\n      if (err) return reject();\n      return resolve(files);\n    });\n  });\n}\n\nclass Dependencies extends AbstractService {\n  init() {\n    this.layersPackageDir = this.getLayerPackageDir();\n    return mkdirp.sync(this.layersPackageDir);\n  }\n\n  getDepsPath() {\n    const { settings } = this.plugin;\n    const rooPath = path.join(settings.path, settings.dependenciesPath);\n\n    return path.resolve(rooPath);\n  }\n\n  async run(cmd) {\n    const output = execSync(cmd, {\n      cwd: this.layersPackageDir,\n      env: process.env\n    }).toString();\n    return output;\n  }\n\n  copyProjectFile(filePath, fileName = null) {\n    this.init();\n\n    if (!fs.existsSync(filePath)) {\n      this.plugin.warn(`[warning] \"${filePath}\" file does not exists!`);\n      return true;\n    }\n\n    return new Promise((resolve) => {\n      const destFile = path.join(this.layersPackageDir, fileName || path.basename(filePath));\n      copyFile(filePath, destFile, (copyErr) => {\n        if (copyErr) throw copyErr;\n        return resolve();\n      });\n    });\n  }\n\n  async install() {\n    const { copyBeforeInstall, copyAfterInstall } = this.plugin.settings;\n\n    this.init();\n    this.plugin.log(`${chalk.inverse.yellow(' Changes identified ')}! Re-installing...`);\n\n    /**\n     * This is necessary because npm is\n     * not possible to specify a custom\n     * name for package.json.\n     */\n    let renameFilename = null;\n    if (this.plugin.settings.runtimeDir === 'nodejs') {\n      renameFilename = 'package.json';\n    }\n\n    await this.copyProjectFile(this.getDepsPath(), renameFilename);\n\n    for (const index in copyBeforeInstall) {\n      const filename = copyBeforeInstall[index];\n      if (!fs.existsSync(filename)) {\n        await this.copyProjectFile(filename);\n      }\n    }\n\n    // custom commands\n    if (this.plugin.settings.customInstallationCommand) {\n      console.log(chalk.white(await this.run(this.plugin.settings.customInstallationCommand)));\n    } else {\n      const commands = this.plugin.runtimes.getCommands();\n      console.log(chalk.white(await this.run(commands[this.plugin.settings.packageManager])));\n    }\n\n    for (const index in copyAfterInstall) {\n      const pathTo = copyAfterInstall[index].to;\n      const pathFrom = copyAfterInstall[index].from;\n\n      const [from] = await resolveFile(path.join(this.layersPackageDir, pathFrom));\n      const to = path.join(this.layersPackageDir, pathTo);\n\n      try {\n        await fsExtra.copy(from, to);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n}\n\nmodule.exports = Dependencies;\n"],"file":"Dependencies.js"}