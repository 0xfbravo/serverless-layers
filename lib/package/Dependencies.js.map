{"version":3,"sources":["../../src/package/Dependencies.js"],"names":["fs","require","chalk","fsExtra","glob","path","mkdirp","execSync","copyFile","AbstractService","resolveFile","from","Promise","resolve","reject","err","files","Dependencies","runtimeDir","plugin","settings","layersPackageDir","join","process","cwd","compileDir","cmd","output","env","toString","filePath","fileName","init","existsSync","warn","destFile","basename","copyErr","copyBeforeInstall","copyAfterInstall","log","inverse","yellow","sync","renameFilename","copyProjectFile","dependenciesPath","index","filename","customInstallationCommand","console","run","white","commands","runtimes","getCommands","packageManager","pathTo","to","pathFrom","copy","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst chalk = require('chalk');\nconst fsExtra = require('fs-extra');\nconst glob = require('glob');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst { execSync } = require('child_process');\nconst copyFile = require('fs-copy-file'); // node v6.10.3 support\n\nconst AbstractService = require('../AbstractService');\n\nfunction resolveFile(from) {\n  return new Promise((resolve, reject) => {\n    glob(from, {}, (err, files) => {\n      if (err) return reject();\n      return resolve(files);\n    });\n  });\n}\n\nclass Dependencies extends AbstractService {\n  init() {\n    const { runtimeDir } = this.plugin.settings;\n    this.layersPackageDir = path.join(process.cwd(), this.plugin.settings.compileDir, 'layers', runtimeDir);\n  }\n\n  async run(cmd) {\n    const output = execSync(cmd, {\n      cwd: this.layersPackageDir,\n      env: process.env\n    }).toString();\n    return output;\n  }\n\n  copyProjectFile(filePath, fileName = null) {\n    this.init();\n\n    if (!fs.existsSync(filePath)) {\n      this.plugin.warn(`[warning] \"${filePath}\" file does not exists!`);\n      return true;\n    }\n\n    return new Promise((resolve) => {\n      const destFile = path.join(this.layersPackageDir, fileName || path.basename(filePath));\n      copyFile(filePath, destFile, (copyErr) => {\n        if (copyErr) throw copyErr;\n        return resolve();\n      });\n    });\n  }\n\n  async install() {\n    const { copyBeforeInstall, copyAfterInstall } = this.plugin.settings;\n\n    this.init();\n    this.plugin.log(`${chalk.inverse.yellow(' Changes identified ')}! Re-installing...`);\n\n    await mkdirp.sync(this.layersPackageDir);\n\n    /**\n     * This is necessary because npm is\n     * not possible to specify a custom\n     * name for package.json.\n     */\n    let renameFilename = null;\n    if (this.plugin.settings.runtimeDir === 'nodejs') {\n      renameFilename = 'package.json';\n    }\n\n    await this.copyProjectFile(this.plugin.settings.dependenciesPath, renameFilename);\n\n    for (const index in copyBeforeInstall) {\n      const filename = copyBeforeInstall[index];\n      if (!fs.existsSync(filename)) {\n        await this.copyProjectFile(filename);\n      }\n    }\n\n    // custom commands\n    if (this.plugin.settings.customInstallationCommand) {\n      console.log(chalk.white(await this.run(this.plugin.settings.customInstallationCommand)));\n    } else {\n      const commands = this.plugin.runtimes.getCommands();\n      console.log(chalk.white(await this.run(commands[this.plugin.settings.packageManager])));\n    }\n\n    for (const index in copyAfterInstall) {\n      const pathTo = copyAfterInstall[index].to;\n      const pathFrom = copyAfterInstall[index].from;\n\n      const [from] = await resolveFile(path.join(this.layersPackageDir, pathFrom));\n      const to = path.join(this.layersPackageDir, pathTo);\n\n      try {\n        await fsExtra.copy(from, to);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n}\n\nmodule.exports = Dependencies;\n"],"file":"Dependencies.js"}